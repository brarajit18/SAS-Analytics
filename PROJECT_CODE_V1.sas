/*******************************************
ADVANCE SAS
MINI PROJECT
AUTHOR: AJITPAL BRAR
DATE: NOV 16, 2019
PURPOSE: WIRELESS CUSTOMER DATA ANALYTICS
		USING SAS, WHICH INCLUDES FOLLOWING:
		1. CUSTOMER SEGMENTATION
		2. REVENUE ANALYSIS
		3. CHURN ANALYSIS
*******************************************/

DATA WCF1;
	INFILE 'D:\DATA SCIENCE METRO COLLEGE\ADVANCE SAS\New_Wireless_Fixed.txt';
	FORMAT acctno 13. actdt mmddyy10. deactdt mmddyy10.;
	INPUT 	@1 acctno 13.
		  	@15 actdt mmddyy10.
			@26 deactdt mmddyy10.
			@41 deactreason $4.
			@53 goodcredit 1.
			@62 rateplan 1.
			@65 dealertype $2.
			@74 age 3.
			@80 province $2.
			@85 sales dollar6.2
			;
RUN;

PROC SORT DATA=WCF1 OUT=WCF1_SORTED;
	by acctno;
RUN;

PROC IMPORT DATAFILE='D:\DATA SCIENCE METRO COLLEGE\ADVANCE SAS\New_Wireless_Pipe.txt'
		OUT = WCF2_TEMP
		DBMS = DLM
		REPLACE;
		DELIMITER='|';
		GETNAMES=YES;
		GUESSINGROWS=MAX;
RUN;

DATA WCF2;
	SET WCF2_TEMP;
	FORMAT acctno 13. actdt mmddyy10. deactdt mmddyy10. sales dollar6.2;
RUN;


/* QUESTION 1: 
				EDA - EXPLORATORY DATA ANALYSIS
				STEPS:
						1. ARE THE ACCOUNTS UNIQUE?
						2. # OF ACTIVATED USERS
						3. # OF DEACTIVATED USERS
						4. EARLIEST AND LATEST ACTIVATIONS/DEACTIVATIONS
						5. MONTHLY ACTIVATIONS/DEACTIVATIONS
						6. REASON FOR DEACTIVATION					
						7. REVENUE ANALYSIS
*/

* STEP 0.1: CHECK HOW MANY ROWS ARE MISSING PER COLUMN;
PROC SUMMARY DATA=WCF1_SORTED;
RUN;
* STEP 0.2: ADD STATUS COLUMN TO THE DATA WITH ACTIVATE/DEACTIVATE OPTIONS;
DATA WCF1_EXT1;
	SET WCF1_SORTED;
	IF DEACTDT=. THEN DO; 
			STATUS='ACTIVATED';
			STATUS_NUMERIC = 1;
		END;
	ELSE DO;
			STATUS='DEACTIVATED';
			STATUS_NUMERIC = 0;
		END;
RUN;

* STEP 1: CHECK IF ALL USER IDS ARE UNQIUE OR NOT;
PROC SQL;
	TITLE 'DUPLICATE ROWS ANALYSIS';
	SELECT COUNT(ACCTNO) AS VAR1 LABEL='TOTAL ROWS', COUNT(DISTINCT ACCTNO) AS VAR2 LABEL='UNIQUE ROWS', CALCULATED VAR1-CALCULATED VAR2 AS VAR3 LABEL='# OF DUPLICATE ROWS',
			CASE 
				WHEN (CALCULATED VAR3 = 0)	THEN 'NO DUPLICATE ROWS'
				ELSE 'DUPLICATE ROWS EXIST'
			END AS VAR4 LABEL = 'BREIF INBUILT ANALYSIS REPORT'
	FROM WCF1_EXT1;
QUIT;	
	/* CONCLUSION: SO, WHEN ALL OF THE ACCOUNTS ARE UNIQUE, WE DON'T NEED TO GROUP ANY DATA BASED UPON CUSTOMER ACCOUNTS (ACCTNO). */

* STEP 2: # OF ACTIVATE/DEACTIVATE USERS;
PROC TABULATE DATA=WCF1_EXT1 OUT=REPORT_1_STATUS;
	TITLE 'COUNT OF ACTIVATE/DEACTIVATE USERS';
	CLASS STATUS;
	VAR STATUS_NUMERIC;
	TABLE STATUS, STATUS_NUMERIC='STATUS'*(N)/rts=25 box='REPORT 1';
RUN;

PROC FORMAT;
	VALUE FMTAGE
		. = 'MISSING'
		0 = 'MISSING'
		1-18 = 'CHILDREN/TEEN'
		19-39 = 'YOUNG WORKERS'
		40-64 = 'SENIOR WORKERS'
		65-HIGH = 'SENIOR CITIZENS';
RUN;
PROC FREQ DATA=WCF1_EXT1;
	TABLE AGE*STATUS_NUMERIC/MISSING LIST;
	FORMAT AGE FMTAGE.;
	TITLE 'PROVINCE WISE ANALYSIS OF ACTIVATE/DEACTIVATE USERS';
RUN;

PROC TABULATE DATA=WCF1_EXT1 OUT=REPORT_2_STATUS;
	TITLE 'COUNT OF ACTIVATE/DEACTIVATE USERS, PROVINCE WISE';
	CLASS PROVINCE STATUS;
	VAR STATUS_NUMERIC;
	TABLE PROVINCE*STATUS, STATUS_NUMERIC='STATUS'*(N)/rts=25 box='REPORT 2';
RUN;

PROC FORMAT;
	VALUE REPORT_ONE 
		0 = 'DEACTIVATED'
		1 = 'ACTIVATED'
		;
RUN;
PROC SGPLOT DATA=WCF1_EXT1;
	TITLE 'COUNT OF ACTIVATE/DEACTIVATE USERS';
	FORMAT STATUS_NUMERIC REPORT_ONE.;
	VBAR STATUS_NUMERIC;
	XAXIS LABEL = 'USER ACCOUNT GROUP';
	YAXIS LABEL = 'COUNT OF USERS'; 
RUN;

* STEP 3: EARLIEST/LATEST ACTIVATION/DEACTIVATIONS;
DATA WCF1_EXT2;
	* ADD TENURE COLUMN TO DATA;
	SET WCF1_EXT1;
	TODAY_DATE = mdy(01, 20, 2001);
	Format TODAY_DATE ddmmyy10.;
	IF DEACTDT=. THEN TENURE=intck('day', actdt, today_date); 
	ELSE TENURE=intck('day', actdt, deactdt);
	DROP TODAY_DATE;
RUN;

PROC SQL OUTOBS=10;
	TITLE 'TOP 10 USERS WITH HIGHEST TENURE';
	*TOP 10 USERS WITH HIGHEST TENURE;
	SELECT * 
	FROM WCF1_EXT2
	ORDER BY TENURE DESC;
QUIT;

PROC SQL OUTOBS=10;
	TITLE 'TOP 10 USERS WITH LOWEST TENURE';
	*TOP 10 USERS WITH LOWEST TENURE;
	SELECT * 
	FROM WCF1_EXT2
	ORDER BY TENURE;
QUIT;


PROC MEANS DATA = WCF1_EXT2;
	* SHOW STATS BASED ON TENURE;
	TITLE 'TENURE ANALYSIS';
	CLASS STATUS;
  	VAR TENURE;
RUN;

PROC MEANS DATA = WCF1_EXT2;
	TITLE 'DEACTIVATED USERS - TENURE & REASON ANALYSIS';
	CLASS STATUS DEACTREASON;
  	VAR TENURE;
RUN;

PROC SORT DATA=WCF1_EXT2 OUT=WCF1_EXT3;
	BY TENURE;
RUN;
PROC RANK DATA=WCF1_EXT3 DESCENDING
	OUT=RESULT_TENURE
	GROUPS = 10;

	RANKS TenureRank;
    VAR TENURE;
RUN;
PROC TABULATE DATA=RESULT_TENURE format=10.;
	TITLE 'STATUS & TENURE ANALYSIS';
    CLASS TenureRank;
    VAR TENURE;
    TABLE TenureRank,  
			TENURE*(N MIN MAX MEAN MEDIAN) / box=_page_ ;
		*TENURE*sum=' '( ) / box=_page_ ;
    FOOTNOTE 'TENURE DISTRIBUTION BY RANK';
RUN;


/*
		4. MONTHLY ACTIVATIONS/DEACTIVATIONS
		5. REASON FOR DEACTIVATION					
		6. REVENUE ANALYSIS
*/


/* STEP 4: ACTIVATED/DEACTIVATED USER ANALYSIS */

PROC SQL;
	* SHOW COUNT OF CURRECTLY ACTIVATE USERS;
	SELECT 'ACTIVATED' as userCount label='# of USERS', COUNT(*)
	FROM Wcf1
	WHERE DEACTDT IS NULL
	UNION
	/* SHOW COUNT OF DEACTIVATED USERS */
	SELECT 'DEACTIVATED' as userCount label='# of USERS', COUNT(*)
	FROM Wcf1
	WHERE DEACTDT IS NOT NULL;
QUIT;

/* STEP 5: REASONS FOR DEACTIVATION */
PROC TABULATE DATA=WCF1_EXT1 OUT=REPORT_2_STATUS;
	TITLE 'REASON OF DEACTIVATION';
	CLASS STATUS DEACTREASON;
	VAR STATUS_NUMERIC;
	TABLE STATUS, DEACTREASON*(N)/rts=25 box='REPORT 2';
RUN;

/* STEP 6: REVENUE ANALYSIS FROM ACTIVATED/DEACTIVATED ACCOUNTS */
PROC SQL;
	TITLE 'REVENUE ANALYSIS (ACTIVATE/DEACTIVATE)';
	SELECT DISTINCT STATUS, SUM(SALES)
	FROM WCF1_EXT1
	GROUP BY STATUS;
QUIT;

PROC SQL;
	TITLE 'REVENUE ANALYSIS (STATUS & DEACTIVATION REASON)';
	SELECT DISTINCT STATUS, DEACTREASON, SUM(SALES)
	FROM WCF1_EXT1
	GROUP BY STATUS, DEACTREASON;
QUIT;

/*****************************************/
/******************************************
	QUESTION 2: 
What is the age and province distributions 
	of active and deactivated customers?

Use dashboards to present and illustrate.
******************************************/
/*****************************************/
PROC SQL;
	CREATE TABLE WORK.UNIQUE_PROVINCES AS
	SELECT DISTINCT PROVINCE
	FROM WCF1_EXT1;
QUIT;
/* DATA WCF111;
	SET WCF11;
	FORMAT STATUS $10.;
	IF PROVINCE=NULL THEN STATUS='EMPTY';
	ELSE STATUS='NOT EMPTY';
	DROP NULL;
RUN; */
PROC FORMAT;
	VALUE $PROVINCELABELS
		AB = 'ALBERTA'
		BC = 'BRITISH COLUMBIA'
		NS = 'NOVA SCOTIA'
		ON = 'ONTARIO'
		QC = 'QUEBEC'
		OTHER = 'NOT SPECIFIED';
	VALUE AGELABELS
		LOW-12 = 'CHILD'
		13-18 = 'TEEN'
		19-30 = 'YOUNG'
		30-50 = 'MATURE'
		50-65 = 'SENIOR WORKER'
		65-HIGH = 'SENIOR CITIZEN';
RUN;
PROC MEANS DATA = WCF1_EXT1 nway N MIN MAX MEAN MEDIAN;
	* SHOW AGE/PROVINCE STATISTICS;
	TITLE 'AGE/PROVINCE BASED ANALYSIS (STATISTICS)';
	FORMAT PROVINCE $PROVINCELABELS.;
	CLASS PROVINCE;
  	VAR AGE;
RUN;

PROC MEANS DATA = WCF1_EXT1 N;
	* SHOW AGE/PROVINCE STATISTICS;
	TITLE 'AGE/PROVINCE BASED ANALYSIS (AGE GROUPS)';
	FORMAT PROVINCE $PROVINCELABELS. AGE AGELABELS.;
	CLASS PROVINCE AGE;
  	VAR AGE;
RUN;

/*****************************************/
/*****************************************/
/******************************************

QUESTION 3: 
	Segment the customers based on age, province and sales amount:
		Sales segment: < $100, $100---500, $500-$800, $800 and above.
		Age segments: < 20, 21-40, 41-60, 60 and above.

******************************************/
/*****************************************/
/*****************************************/
PROC FORMAT;
	VALUE SALESSCALE
		LOW-100 = '<100'
		101-500 = '100-500'
		501-800 = '500-800'
		801-HIGH = '>800';
RUN; 
PROC TABULATE DATA=WCF1_EXT1 MISSING; 
	TITLE 'ANALYSIS OF SALES BY PROVINCE';
	CLASS PROVINCE SALES;
	VAR ACCTNO;
	FORMAT SALES SALESSCALE.;
	TABLE PROVINCE, SALES*(N)/rts=25 box='PROVINCE-WISE SALES REPORT';
RUN;
PROC TABULATE DATA=WCF1_EXT1 MISSING; 
	TITLE 'ANALYSIS OF SALES BY PROVINCE';
	CLASS PROVINCE SALES AGE;
	VAR ACCTNO;
	FORMAT SALES SALESSCALE. AGE AGELABELS.;
	TABLE PROVINCE, AGE*SALES(N)/rts=25 box='PROVINCE-WISE SALES REPORT';
RUN;

PROC TABULATE DATA=WCF1_EXT1(WHERE=(STATUS_NUMERIC=1)) MISSING; 
	TITLE 'ANALYSIS OF SALES BY PROVINCE';
	CLASS PROVINCE SALES AGE;
	VAR ACCTNO;
	FORMAT SALES SALESSCALE. AGE AGELABELS.;
	TABLE PROVINCE, AGE*SALES(N)/rts=25 box='PROVINCE-WISE SALES REPORT';
RUN;


PROC FORMAT;
	VALUE AGELABELS
		LOW-18 = 'CHILDREN/TEENS'
		18-24 = 'YOUNG PEOPLE'
		25-39 = 'MATURE WORKERS'
		40-64 = 'SENIOR WORKERS'
		65-HIGH = 'SENIOR CITIZEN (>65)';
RUN;

PROC MEANS DATA = WCF1_EXT1 N;
	* CUSTOMER SEGMENTATION BASED UPON AGE ;
	TITLE 'AGE/PROVINCE BASED ANALYSIS (AGE GROUPS)';
	FORMAT PROVINCE $PROVINCELABELS. AGE AGELABELS.;
	CLASS PROVINCE AGE;
  	VAR AGE;
RUN;


/*****************************************/
/*****************************************/
/******************************************

QUESTION 4: 


******************************************/
/*****************************************/
/*****************************************/

* GOOD CREDIT AND RATEPLAN BASED ANALYSIS;
PROC FORMAT;
	VALUE TENURESCALE
		LOW-29 = 'LESS THAN A MONTH'
		30-60 = '1-2 MONTHS'
		61-180 = '3-6 MONTHS'
		181-365 = '6-12 MONTHS'
		366-HIGH = 'MORE THAN A YEAR';
RUN;

PROC TABULATE DATA=WCF1_EXT2(WHERE=(ACTIVE=1)) MISSING;
	CLASS TENURE GOODCREDIT RATEPLAN DEALERTYPE;
	VAR ACCTNO;
	FORMAT TENURE TENURESCALE.;
	TABLE TENURE=' '*
				(N pctsum<tenure>='% of column'),
				goodcredit*acctno=' '
				rateplan*acctno=' '
				dealertype*acctno=' ' /box='Tenure';
RUN;

/* TIES=LOW gives tied values the best possible rank */
PROC PRINT DATA=RESULT_TENURE ;
   BY tenure;
   TITLE 'TENURE BASED ANALYSIS';
run; 


PROC SORT DATA=WCF1;
	BY ACTDT;
RUN;

/*****************************************/
/*****************************************/
/*****************************************/
* SHOW DETAILS OF CURRECTLY ACTIVATE USERS;
PROC SQL;
	SELECT *
	FROM Wcf1
	WHERE DEACTDT IS NULL;
QUIT;

* SHOW COUNT OF CURRECTLY ACTIVATE USERS;
PROC SQL;
	SELECT COUNT(*)
	FROM Wcf1
	WHERE DEACTDT IS NULL;
QUIT;


* SHOW DETAILS OF DEACTIVATED USERS;
PROC SQL;
	SELECT *
	FROM Wcf1
	WHERE DEACTDT IS NOT NULL;
QUIT;

* MONTH-WISE DEACTIVATION-ACTIVATION COUNT;
DATA Wcf1_Monthwise;
	SET Wcf1;
	month_act = month(actdt);
	year_act = year(actdt);
	month_deact = month(deactdt);
	year_deact = year(deactdt);
RUN;

PROC SQL;	* ACTIAVTION COUNT;
	SELECT year_act, month_act, count(sales) label='# OF ACTIVATIONS', sum(sales) label='TOTAL SALES'
		FROM wcf1_monthwise
		WHERE deactdt IS NULL
		GROUP BY year_act, month_act
		ORDER BY year_act, month_act;
QUIT;

PROC SQL;	* DEACTIAVTION COUNT;
	SELECT year_deact, month_deact, count(sales) label='# OF DEACTIVATIONS', sum(sales) label='TOTAL LOSS'
		FROM wcf1_monthwise
		WHERE deactdt IS NOT NULL
		GROUP BY year_deact, month_deact
		ORDER BY year_deact, month_deact;
QUIT;



PROC MEANS DATA=WCF1_EXT1 NOOBS N SUM;
	FORMAT AGE AGELABELSTWO. SALES SALESLICING.;
	CLASS AGE SALES;
	VAR SALES;
RUN;


PROC TABULATE DATA=WCF1_EXT1;
    CLASS AGE SALES;
	FORMAT AGE AGELABELSTWO. SALES SALESLICING.;
    TABLE SALES=''*(N ;
RUN;

proc tabulate data=mydata f=6. out=work.tabout;
  class region;
  var payout;
  tables region, payout*(N sum);

run;


PROC MEANS DATA=WCF1_EXT1;
	CLASS SALES;
	FORMAT SALES SALESLICING.;
RUN;
PROC RANK DATA=WCF1_EXT1 descending
               GROUPS = 10
               OUT = G10_DATA     ;
            RANKS rank            ;
            VAR sales             ;
RUN; 
proc freq data=G10_DATA;
  table rank/nocol norow;
run;


proc rank data=wcf1_ext1 out=ranky ties=low
 descending groups=10; 
 var sales;
 ranks r_score;
run;
proc means data=ranky noprint;
 class r_score;
 var score event;
 output out=report
 n=n
 min(score)=score_min max(score)=score_max
 mean(event)=event_mean;
run;
proc print data=report noobs;
 var r_score n score_min score_max event_mean;
 format n comma6. event_mean percent10.2;
run; 
